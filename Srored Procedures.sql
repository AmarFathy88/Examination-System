
CREATE PROC ADD_NEW_ROUND(@YEAR INT, @ROUND INT)
AS 
BEGIN
INSERT INTO ROUND
VALUES(@YEAR,@ROUND)
END
GO
EXEC ADD_NEW_ROUND 2020,1
EXEC ADD_NEW_ROUND 2020,2
EXEC ADD_NEW_ROUND 2021,1
EXEC ADD_NEW_ROUND 2021,2
EXEC ADD_NEW_ROUND 2022,1
EXEC ADD_NEW_ROUND 2022,2
EXEC ADD_NEW_ROUND 2023,1
EXEC ADD_NEW_ROUND 2023,2
GO
------------------------------------------
CREATE PROC ADD_NEW_COURSE(@C_ID VARCHAR(5), @C_NAME VARCHAR(50), @DESC VARCHAR(255))
AS
BEGIN
INSERT INTO Courses
VALUES(@C_ID, @C_NAME,@DESC)
END

go
EXEC ADD_NEW_COURSE 'SQLDB','SQL',''
exec ADD_NEW_COURSE "OS" , "Operating System" , " "
exec ADD_NEW_COURSE "html" , "HTML" , " "
exec ADD_NEW_COURSE "DgMrk" , "Digital Markting" , " "
exec ADD_NEW_COURSE "En" , "English" , " "

EXEC ADD_NEW_COURSE 'STCS','STATISTICS',''
EXEC ADD_NEW_COURSE 'CSS','CSS',''
EXEC ADD_NEW_COURSE 'JSCRT','JAVA SCRIPT',''
EXEC ADD_NEW_COURSE 'PWRBI','POWER BI',''
EXEC ADD_NEW_COURSE 'SSKLS','SOFT SKILLS',''
EXEC ADD_NEW_COURSE 'ML','MACHINE LEARNING',''
EXEC ADD_NEW_COURSE 'PY','PYTHON',''
EXEC ADD_NEW_COURSE 'xml','XML',''

-----------------------------------------------
GO
CREATE PROC ADD_NEW_TRACK (@TRACK_ID VARCHAR(5), @TRACK_NAME VARCHAR(50),@HOURS INT)
AS 
BEGIN
INSERT INTO TrackS
VALUES(@TRACK_ID , @TRACK_NAME, @HOURS)
END

EXEC ADD_NEW_TRACK 'DSINS' , 'DATA SCIENCE', 0
EXEC ADD_NEW_TRACK 'WEBFE' , 'FRONT END DEVELOPMENT', 0
EXEC ADD_NEW_TRACK 'SSKIL' , 'SOFT SKILLS', 0
EXEC ADD_NEW_TRACK 'P_BID' , 'POWER BI DEVELPMENT', 0
EXEC ADD_NEW_TRACK 'DIGMT' , 'DIGITAL MARKETING', 0

--------------------------------------------
GO 
CREATE PROC ADD_NEW_BRANCH(@BRANCH_ID INT , @BRANCH_CITY VARCHAR(25),@LOCATION VARCHAR (25))
AS 
BEGIN
INSERT INTO Branch
VALUES (@BRANCH_ID,@BRANCH_CITY , @LOCATION)
END

EXEC ADD_NEW_BRANCH 1,'NASR CITY','CAIRO'
-------------------------------------------
GO
CREATE PROC ADD_NEW_STUDENT (@student_SSN varchar(14),@ST_Fname varchar(50),@ST_Lname varchar(50) ,
	@ST_Email varchar(50),@ST_Password@ varchar(50),@Gender varchar(1),@Faculty varchar(30),
	@Phone varchar(11),@Birthdate date,@Gratuated bit,@Gratuation_date date,@GetAJob bit,@City varchar(25))
AS
BEGIN
INSERT INTO STUDENTS
VALUES(@student_SSN,@ST_Fname,@ST_Lname,@ST_Email,@ST_Password@,@Gender,@Faculty,@Phone,@Birthdate,@Gratuated
		,@Gratuation_date,@GetAJob,@City)
END

EXEC ADD_NEW_STUDENT '12345678910111','AMAR','FATHY','fathyamar78@gmail.com','20599Am','M','FCAI','01011636713',
						'05/20/1999',0,'07/20/2021',0,'BENI SUIF'

----------------------------------------------
GO
CREATE PROC ADD_NEW_INSTRUCTOR (@INST_SSN varchar(14),@INST_Fname varchar(50),@INST_Lname varchar(50) ,
	@INST_Email varchar(50),@INST_Password varchar(50),@Gender varchar(1),@City varchar(25),
	@Phone varchar(11),@Birthdate date,@SALARY INT,@POSITION varchar(50))
AS
BEGIN
INSERT INTO Instructor
VALUES(@INST_SSN,@INST_Fname,@INST_Lname,@INST_Email,@INST_Password,@Gender,@City,@Phone,@Birthdate,@SALARY,@POSITION)
END

EXEC ADD_NEW_INSTRUCTOR'10203040506070','OMAR','KHALED','omarkhaled@gmail.com','123456789','M','CAIRO','01011636713',
						'05/20/1989',9000,'SENIOR'
---------------------------------------------
GO
CREATE PROC TRACK_HAS_COURSE (@COURSE_ID VARCHAR(5),@TRACK_ID VARCHAR (5),@HOURS INT)
AS 
BEGIN
INSERT INTO Course_Track
VALUES (@COURSE_ID,@TRACK_ID,@HOURS)
END

EXEC TRACK_HAS_COURSE 'ML','DSINS',60
EXEC TRACK_HAS_COURSE 'OS','DSINS',15
EXEC TRACK_HAS_COURSE 'SQLDB','DSINS',60
EXEC TRACK_HAS_COURSE 'PY','DSINS',36
EXEC TRACK_HAS_COURSE 'STCS','DSINS',30
-----------------------------------------
GO
CREATE PROC OPEN_TRACK_IN_BRANCH (@TRACK_ID VARCHAR(5),@BRANCH_ID INT,@YEAR INT,@ROUND INT,@SUPERV VARCHAR(14))
AS
BEGIN
INSERT INTO BRANCH_TRACKS
VALUES (@TRACK_ID,@BRANCH_ID,@YEAR,@ROUND,@SUPERV)
END

EXEC OPEN_TRACK_IN_BRANCH 'BI',1,2023,2,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',1,2022,1,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',2,2022,1,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',3,2023,1,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',4,2023,2,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',5,2023,1,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',5,2022,2,10203040506070
EXEC OPEN_TRACK_IN_BRANCH 'BI',2,2022,2,10203040506070


GO
--------------------------------
GO
CREATE PROC Add_COURSES_TO_TEACH (@COURSE_ID VARCHAR(5),@GENERATED_ID VARCHAR(13),@INST_ID VARCHAR(14),@FULL_GRADE INT
									,@S_DATE DATE,@E_DATE DATE)
AS
BEGIN
INSERT INTO Instructor_Tech_Course 
VALUES (@COURSE_ID,@GENERATED_ID,@INST_ID,@FULL_GRADE,@S_DATE,@E_DATE)
END

EXEC Add_COURSES_TO_TEACH 'ML','202311DSINS','10203040506070',100,'01/05/2023','01/25/2023'

---------------------------------------
GO
CREATE PROC Add_TRACK_PRICE (@TRACK_ID VARCHAR(5),@YEAR INT , @ROUND INT,@PRICE INT)
AS
BEGIN
INSERT INTO Track_Round
VALUES(@TRACK_ID,@YEAR,@ROUND,@PRICE)
END

EXEC Add_TRACK_PRICE 'DSINS',2023,1,8000
---------------------------
GO
CREATE PROC Add_COURSE_PRICE (@COURSE_ID VARCHAR(5),@YEAR INT , @ROUND INT,@PRICE INT)
AS
BEGIN
INSERT INTO Course_Round
VALUES(@COURSE_ID,@YEAR,@ROUND,@PRICE)
END

EXEC Add_COURSE_PRICE 'ML',2023,1,2000
--------------------------
GO
-- DO NOT USE IT **********DO NOT USE IT*************************
CREATE PROC ADD_COURSE_TO_STUDENT (@C_ID VARCHAR(5),@INS_ID VARCHAR(14),@G_ID VARCHAR(13),@S_ID VARCHAR(14))
AS
BEGIN
INSERT INTO Student_Teach_Course
VALUES(@C_ID,@INS_ID,@G_ID ,@S_ID,0,0,0)
END
-------------------------
GO
CREATE PROC ADD_STUDENT_TO_SYSTEM (@B_ID INT,@T_ID VARCHAR(5),@S_ID VARCHAR(14),@YEAR INT,@ROUND INT,
									@ST_RATE_BRANCH INT,@ST_RATE_TRACK INT)
AS
BEGIN
INSERT INTO Student_Track_Branch
VALUES(@B_ID,@T_ID,@S_ID ,@YEAR ,@ROUND,@ST_RATE_BRANCH,@ST_RATE_TRACK)

DECLARE @T TABLE (X VARCHAR(5))
INSERT INTO @T
SELECT Course_id FROM Course_Track WHERE Track_id = @T_ID
--SELECT * FROM @T
DECLARE @LEN INT =0
SELECT @LEN=COUNT(*)FROM @T
--SELECT @LEN
DECLARE @TEMP_CRS VARCHAR (5)
DECLARE @TEMP_INST VARCHAR(14)
DECLARE @GENERAT_ID VARCHAR(13)
SET @GENERAT_ID = (convert(varchar(4),@YEAR) +convert(varchar(1),@ROUND)+convert(varchar(3),@B_ID)+convert(varchar(5),@T_ID))
WHILE @LEN >0
	BEGIN
		SET @TEMP_CRS=(SELECT Course_id FROM
		(SELECT Course_id,ROW_NUMBER()OVER(ORDER BY Course_id) AS RN
		FROM Course_Track WHERE Track_id = @T_ID)S
		WHERE S.RN =@LEN)
	
		SET @TEMP_INST = (select INST_SSN from Instructor_Tech_Course
		where Course_id = @TEMP_CRS AND Generated_id = @GENERAT_ID)
	
		EXEC ADD_COURSE_TO_STUDENT @TEMP_CRS , @TEMP_INST,@GENERAT_ID,@S_ID
		SET @LEN = @LEN-1
	END
END
-- please do not use it untill upload all courses of track into 'Instructor_Tech_Course' table
EXEC ADD_STUDENT_TO_SYSTEM 1,'DSINS','12345678910111',2023,1,1,1
------------------------------------------------
GO  -------PLEASE DO NOT USE IT
CREATE PROC EXAM_WITH_STUDENT(@E_ID INT,@S_ID VARCHAR(14))
AS 
BEGIN
INSERT INTO EXAM_STUDENT
VALUES(@E_ID,@S_ID,0,1,0)
END
----------------------------------
go
CREATE PROC CREATE_EXAM (@INST_ID VARCHAR(14),@C_ID VARCHAR(5),@G_ID VARCHAR(13),@S_DATE DATE,@E_DATE DATE,
							@TITAL VARCHAR(100),@DES VARCHAR(150),@TF INT ,@CH INT)
AS
BEGIN
INSERT INTO EXAM
VALUES(@INST_ID,@C_ID,@G_ID,@S_DATE,@E_DATE,@TITAL,@DES,@TF,@CH)

DECLARE @E_ID INT = (SELECT SCOPE_IDENTITY())
DECLARE @TT TABLE (X VARCHAR(14),RN INT)
INSERT INTO @TT
SELECT Student_id, ROW_NUMBER()OVER(ORDER BY Student_id) AS RN 
FROM Student_Teach_Course
WHERE Generated_id = @G_ID AND Course_id = @C_ID AND Inst_SSN = @INST_ID 
--WHERE Generated_id = '202311DSINS' AND Course_id = 'ML' AND Inst_SSN = '10203040506070' 

DECLARE @LEN INT =0
SELECT @LEN = COUNT(*)FROM @TT 
DECLARE @STUDENT_SSN VARCHAR(14)
WHILE @LEN>0
	BEGIN
		SET @STUDENT_SSN=( SELECT X FROM @TT WHERE RN = @LEN )
		EXEC EXAM_WITH_STUDENT @E_ID,@STUDENT_SSN

		SET @LEN= @LEN - 1
	END
END

EXEC CREATE_EXAM '10203040506070','ML','202311DSINS','06/08/2023','06/15/2023','MACHINE LEARNING EXAM',' ',2,10
---------------------------------------
GO

CREATE PROC GENERATE_RANDOM_EXAM(@STUDENT_ID VARCHAR(14),@EXAM_ID INT)
AS 
BEGIN 
	DECLARE @AVAILABLE BIT
	SELECT @AVAILABLE =Available FROM EXAM_STUDENT WHERE EXAM_ID = @EXAM_ID AND STUDENT_SSN = @STUDENT_ID
	SELECT @AVAILABLE
	IF @AVAILABLE = 1  -- TO ENSURE THAT THE STUDENT HAS NOT TAKEN THIS EXAM BEFORE
		BEGIN
			DECLARE @COURSE_ID VARCHAR(5)
			DECLARE @CH INT, @TF INT
			SELECT @COURSE_ID=Course_id,@CH = Choice,@TF = [T&F] FROM Exam 
			WHERE EXAM_ID = @EXAM_ID
			DECLARE @TEMP_TABLE TABLE (Q_ID INT,Q VARCHAR(250),A VARCHAR(100),B VARCHAR(100),C VARCHAR(100),D VARCHAR(100))
			INSERT INTO @TEMP_TABLE
			SELECT TOP(@CH) Q_id, Question , A,B,C,D  FROM Question_Bank
			WHERE Course_id = @COURSE_ID AND Q_Type = 'CH'
			ORDER BY NEWID()
			INSERT INTO @TEMP_TABLE
			SELECT TOP(@TF) Q_id, Question , A,B,C,D  FROM Question_Bank
			WHERE Course_id = @COURSE_ID AND Q_Type = 'TF'
			ORDER BY NEWID()

			SELECT Q,A,B,C,D FROM @TEMP_TABLE  -- TO SHOW GENERATED EXAM QUESTIONS

			INSERT INTO Answers
			SELECT @EXAM_ID ,@STUDENT_ID,Q_ID,'',0 FROM @TEMP_TABLE

			UPDATE EXAM_STUDENT
			SET Available = 0  --To prevent the student from taking the same exam again
			WHERE STUDENT_SSN = @STUDENT_ID AND EXAM_ID = @EXAM_ID
		END
	ELSE
		SELECT ' You has taken this exam before'
END

--GENERATE EXAM FOR STUDENT
EXEC GENERATE_RANDOM_EXAM '12345678910111',4
-------------------------
GO
CREATE TYPE ANSWER_TABLE AS TABLE
(
Q_ID INT,
ANS VARCHAR(4)
)
-----------------------
GO
CREATE PROC ANSWER_AND_CORRECTION(@ANSWER ANSWER_TABLE READONLY,@S_ID VARCHAR (14), @E_ID INT)
AS 
BEGIN 
	DECLARE @T TABLE(QID INT , ANS VARCHAR(4),RN INT)
	INSERT INTO @T
	SELECT Q_ID,ANS, ROW_NUMBER()OVER(ORDER BY Q_ID) AS RN 
	FROM @ANSWER
	DECLARE @CORRECT_ANS VARCHAR(5)
	DECLARE @LEN INT =0
	DECLARE @TOTAL INT=0
	SELECT @LEN =COUNT(*) FROM @T
	WHILE @LEN >0
	BEGIN
		SET @CORRECT_ANS =(SELECT Model_Answer FROM Question_Bank WHERE Q_id = (SELECT QID FROM @T WHERE RN = @LEN))
		IF @CORRECT_ANS=(SELECT ANS FROM @T WHERE RN = @LEN)
		BEGIN
			UPDATE Answers
			SET Student_Asn = (SELECT ANS FROM @T WHERE RN = @LEN), Grade = 1
			WHERE EXAM_ID = @E_ID AND Student_SSN = @S_ID AND Q_id = (SELECT QID FROM @T WHERE RN = @LEN)
			SET @TOTAL =@TOTAL + 1
		END
		ELSE
		BEGIN
			UPDATE Answers
			SET Student_Asn = (SELECT ANS FROM @T WHERE RN = @LEN), Grade = 0
			WHERE EXAM_ID = @E_ID AND Student_SSN = @S_ID AND Q_id = (SELECT QID FROM @T WHERE RN = @LEN)
		END
		SET @LEN = @LEN -1	
	END
	
	UPDATE EXAM_STUDENT		--STORE THE TOTAL GRADE OF THIS STUDENT IN THIS EXAM
	SET STUDENT_GRADE = @TOTAL
	WHERE STUDENT_SSN = @S_ID AND EXAM_ID = @E_ID

END
GO



DECLARE @ANSWERS_TABLE ANSWER_TABLE 
INSERT INTO @ANSWERS_TABLE
VALUES (413,'d'),(415,'d'),(416,'b'),(418,'B'),(420,'b'),(422,'c'),(427,'b'),(428,'d'),(430,'d'),(437,'true'),(448,'true')

EXEC ANSWER_TO_QUESTION @ANSWERS_TABLE,'12345678910111',4


---------------------------------------------------------
GO
SELECT * FROM Courses
SELECT * FROM STUDENTS
SELECT * FROM Instructor
SELECT * FROM Student_Teach_Course
SELECT * FROM EXAM_STUDENT
SELECT * FROM Answers
select * from Question_Bank
SELECT * FROM EXAM
SELECT * FROM BRANCH
SELECT * FROM ROUND
SELECT * FROM Tracks
SELECT * FROM BRANCH_TRACKS